variables:
  SAFE_TEST:
    value: "false"
    description: "Run a test to check the build pipeline before actually deploying, when set to \"true\"."
  TASK_ARGUMENTS:
    value: ""
    description: "Add any additional gradle commands for this build here. ex: \"-Pforce -x updateReleaseVersion\""
  BASE_GRADLE_FLAGS: '-s --no-daemon -PnoMavenLocal --refresh-dependencies --console=plain $TASK_ARGUMENTS'
  STANDARD_GRADLE_FLAGS: "$BASE_GRADLE_FLAGS" #This is modified during workflow rules
  GRADLE_TEST_FLAGS: "$STANDARD_GRADLE_FLAGS $EXTRA_GRADLE_TEST_FLAGS"
  INSTALLER_GRADLE_FLAGS: "$GRADLE_FLAGS -Pi4jLicenseKey=${I4J_LICENSE_KEY} -PnoMavenLocal"
  DEV_OR_RELEASE_REGEX: '^develop$|^v3-develop$|^v2-develop$|^[0-9]+\.[0-9]+$|^release\/.+$'
  DEFAULT_IMAGE: "openjdk:11"
  GITLAB_FEATURES: "$GITLAB_FEATURES|dependency_scanning"
  QUALITY_CHECK_GRADLE_TASKS: pmdMain violations

default:
  image: $DEFAULT_IMAGE

include:
  - remote: https://raw.githubusercontent.com/chesapeaketechnology/gitlab-templates/release/1.2/lib/gitlab/ci/templates/references/certs/CertificateOfAuthoritySetup.yml
  - remote: https://raw.githubusercontent.com/chesapeaketechnology/gitlab-templates/release/1.2/lib/gitlab/ci/templates/references/gradle/GradleWrapperSetup.yml
  - remote: https://raw.githubusercontent.com/chesapeaketechnology/gitlab-templates/release/1.2/lib/gitlab/ci/templates/jobs/gradle/Test.yml
  - remote: https://raw.githubusercontent.com/chesapeaketechnology/gitlab-templates/release/1.2/lib/gitlab/ci/templates/jobs/gradle/PublishJar.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml

test_java:
  before_script:
    - !reference [ .configure_gradle_wrapper, script ]
    - !reference [ .update_trust_store, script ]

publish_javadocs:
  before_script:
    - !reference [ .configure_gradle_wrapper, script ]
    - !reference [ .update_trust_store, script ]

publish_snapshot_jar:
  before_script:
    - !reference [ .configure_gradle_wrapper, script ]
    - !reference [ .update_trust_store, script ]

publish_release_jar:
  before_script:
    - !reference [ .configure_gradle_wrapper, script ]
    - !reference [ .update_trust_store, script ]

secret_detection:
  stage: test
  artifacts:
    reports:
      secret_detection: gl-secret-detection-report.json
    paths:
      - gl-secret-detection-report.json
  rules:
    - if: $SECRET_DETECTION_DISABLED
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH =~ $DEV_OR_RELEASE_REGEX
    - if: $CI_PIPELINE_SOURCE == "web"


secret_detection_validation:
  stage: report_processing
  script:
    - echo 'Checking for secrets'
    - if grep -q '\"vulnerabilities\"..\[]', gl-secret-detection-report.json; then
        echo 'No secrets detected';
      else
        echo 'Detected secrets in commit! Please view the `gl-secret-detection-report.json artifact for details.' && exit 1;
      fi
  needs: ["secret_detection"]
  rules:
    - if: $SECRET_DETECTION_DISABLED
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH =~ $DEV_OR_RELEASE_REGEX
    - if: $CI_PIPELINE_SOURCE == "web"


gemnasium-maven-dependency_scanning:
  artifacts:
    reports:
      dependency_scanning:
        - gl-dependency-scanning-report.json
    paths:
      - gl-dependency-scanning-report.json
  rules:
    - if: $MAVEN_DETECTION_DISABLED
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH =~ $DEV_OR_RELEASE_REGEX
    - if: $CI_PIPELINE_SOURCE == "web"


dependency_scanning_validation:
  stage: report_processing
  image: python:3.11-rc-alpine
  allow_failure: true
  needs: ["gemnasium-maven-dependency_scanning"]
  script:
    - ls
    - wget https://raw.githubusercontent.com/chesapeaketechnology/gitlab-templates/release/1.2/lib/gitlab/ci/templates/references/security/validate_security_scan.py
    - python3 validate_security_scan.py gl-dependency-scanning-report.json $EXCLUDED_VULNERABILITY_PACKAGES
  rules:
    - if: $MAVEN_DETECTION_DISABLED
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH =~ $DEV_OR_RELEASE_REGEX
    - if: $CI_PIPELINE_SOURCE == "web"

quality_check:
  stage: test
  script:
    - ./gradlew $QUALITY_CHECK_GRADLE_TASKS
  rules:
    - if: $QUALITY_CHECK_ENABLED
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH =~ $DEV_OR_RELEASE_REGEX
    - if: $CI_PIPELINE_SOURCE == "web"

stages:
  - test
  - report_processing
  - publish
  - repo_management

workflow:
  rules:
    - if: '$SAFE_TEST =~ /true/i'
      variables:
        STANDARD_GRADLE_FLAGS: '$BASE_GRADLE_FLAGS -PsafeTest'
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH =~ $DEV_OR_RELEASE_REGEX
    - if: $CI_PIPELINE_SOURCE == "web"

include:
  - remote: https://raw.githubusercontent.com/chesapeaketechnology/gitlab-templates/release/2.x.x/lib/gitlab/ci/templates/references/gradle/GradleWrapperSetup.yml

stages:
  - build
  - test
  - repo_management

variables:
  # Pre-Filled build vars
  RELEASE:
    value: ""
    description: "Leave blank for snapshot. 'final' for final release, and anything else for a release candidate."
  EXTRA_GRADLE_FLAGS:
    value: ""
    description: "Any extra gradle flags"

  # General build vars
  STANDARD_GRADLE_FLAGS: '-s --no-daemon -PnoMavenLocal --refresh-dependencies --console=plain'
  GRADLE_FLAGS: "$STANDARD_GRADLE_FLAGS $EXTRA_GRADLE_FLAGS"
  DEV_REGEX: '^(v[0-9]-)?develop$|^main$'
  RELEASE_REGEX: '^[0-9]+\.[0-9]+$|^release\/.+$'
  SUPPORT_REGEX: '^[0-9]+\.[0-9]+$|^support\/.+$'
  DEV_OR_RELEASE_OR_SUPPORT_REGEX: "$DEV_REGEX|$RELEASE_REGEX|$SUPPORT_REGEX"

  IMAGE_PREFIX: ""
  DEFAULT_IMAGE: "jangrewe/gitlab-ci-android"

  REPORTS_ARTIFACT: ${CI_PROJECT_DIR}/app/build/reports/tests/

  LINT_CHECK_DISABLED: "false"

  ANDROID_EMULATOR_IP: ""
  ANDROID_EMULATOR_ADB_PORT: 5555
  APP_PACKAGE_NAMES_TO_FORCE_UNINSTALL: ""

default:
  image: ${IMAGE_PREFIX}$DEFAULT_IMAGE
  interruptible: true

# Packages installation before running script
before_script:
  - !reference [ .configure_gradle_wrapper, script ]

  # General build var initialization
  - if [[ $CI_COMMIT_BRANCH =~ $DEV_REGEX ]]; then IS_DEV_BRANCH="true"; else IS_DEV_BRANCH=""; fi
  - if [[ $CI_COMMIT_BRANCH =~ $RELEASE_REGEX ]]; then IS_RELEASE_BRANCH="true"; else IS_RELEASE_BRANCH=""; fi
  - if [[ $CI_COMMIT_BRANCH =~ $SUPPORT_REGEX ]]; then IS_SUPPORT_BRANCH="true"; else IS_SUPPORT_BRANCH=""; fi
  - if [[ ! $CI_COMMIT_BRANCH =~ $DEV_OR_RELEASE_OR_SUPPORT_REGEX ]]; then IS_FEATURE_BRANCH="true"; else IS_FEATURE_BRANCH=""; fi

lintDebug:
  stage: build
  rules:
    - if: '$LINT_CHECK_DISABLED =~ /true/i'
      when: never
    # Only build pushes (not merge requests), but not for tag pushes
    - if: ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "web") && $CI_COMMIT_BRANCH && $CI_COMMIT_TAG == null
      when: always
    - when: never
  script:
    - ./gradlew $GRADLE_FLAGS lintDebug
  after_script:
    - echo "copying lint results to gitlab pages so html can be viewed easily in a Gitlab artifact"
    - public_dir_tmp=$CI_PROJECT_DIR/../public
    - public_dir_final=$CI_PROJECT_DIR/public
    - mkdir -p $public_dir_final
    - mv $public_dir_final $public_dir_tmp
    - destination=$(cd -- "$public_dir_tmp" && pwd) # make it an absolute path
    - echo $destination
    - |+
      cd -- "$CI_PROJECT_DIR" &&
      find . -name "lint-results-debug.html" -exec sh -c '
      mkdir -p "$0/${1%/*}"
      cp "$1" "$0/$1"
      ' "$destination" {} \;
    - mv $public_dir_tmp $public_dir_final
  artifacts:
    paths:
      - "**/build/reports/lint-results-debug.html"
      - public
    when: always
  allow_failure: true

# Build project
build:
  interruptible: true
  stage: build
  rules:
    # Only build pushes (not merge requests), but not for tag pushes
    - if: ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "web") && $CI_COMMIT_BRANCH && $CI_COMMIT_TAG == null
      when: always
    - when: never
  script:
    # Do not publish snapshots from feature branches
    - if [[ -n "$IS_FEATURE_BRANCH" ]]; then NO_PUBLISH="-x publish"; else NO_PUBLISH="publish"; fi
    - echo "NO_PUBLISH = '$NO_PUBLISH'"
    - ./gradlew $GRADLE_FLAGS -Pforce -PforcePublish build $NO_PUBLISH
  artifacts:
    when: always
    paths:
      - $REPORTS_ARTIFACT

release_build:
  stage: build
  rules:
    # Only when manually invoked from the web UI and RELEASE has a non-empty value
    - if: $CI_PIPELINE_SOURCE == "web" && $RELEASE
      when: always
    - when: never
  script:
    - if [[ -z "$IS_RELEASE_BRANCH" ]]; then
      echo "You can not run release builds off of branch $CI_COMMIT_BRANCH";
      exit 1;
      fi
    - if [[ $(echo $RELEASE | tr '[:upper:]' '[:lower:]') == "final" ]] ; then
      echo "FINAL BUILD";
      RC_FLAG=-Pfinal;
      else
      echo "RC build $RELEASE";
      RC_FLAG=-Prc=${RELEASE};
      fi
    - ./gradlew $GRADLE_FLAGS -Pforce -PforcePublish -Prelease $RC_FLAG build publish

# Run all tests, if any fails, interrupt the pipeline(fail it)
debugTests:
  interruptible: true
  stage: test
  script:
    - ./gradlew -Pci --console=plain test

instrumentationTests:
  interruptible: true
  stage: build
  rules:
    # Only build pushes (not merge requests), but not for tag pushes
    - if: ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "web") && $CI_COMMIT_BRANCH && $CI_COMMIT_TAG == null
      when: always
    - when: never
  variables:
    ANDROID_SDK_ROOT: "/sdk"
    ADB_EXECUTABLE: $ANDROID_SDK_ROOT/platform-tools/adb
    CONNECTED_TEST_TARGET: connectedMilDebugAndroidTest
  script:
    - sdkmanager --version

    - sdkmanager "platform-tools"

    # Not necessary, but just for surity
    - chmod +x ./gradlew

    - ls -l $ANDROID_HOME/platform-tools

    - $ADB_EXECUTABLE start-server
    - $ADB_EXECUTABLE devices
    - $ADB_EXECUTABLE connect "$ANDROID_EMULATOR_IP:$ANDROID_EMULATOR_ADB_PORT"
    - $ADB_EXECUTABLE devices

    - |+
      for app_package_name in $APP_PACKAGE_NAMES_TO_FORCE_UNINSTALL
      do
        adb uninstall "$app_package_name" || true; 
      done

    - ./gradlew -Pci --console=plain $CONNECTED_TEST_TARGET
  artifacts:
    when: always
    expire_in: 1 week
    reports:
      junit: [
        ./**/build/outputs/androidTest-results/connected/TEST-*.xml,
      ]
    paths:
      - "**/build/outputs/androidTest-results"
      - "**/build/reports/androidTests"

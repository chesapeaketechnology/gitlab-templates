include:
  - remote: https://raw.githubusercontent.com/chesapeaketechnology/gitlab-templates/release/1.3/lib/gitlab/ci/templates/references/gradle/GradleWrapperSetup.yml

cache:
  key: ${CI_PROJECT_ID}
  paths:
    - .gradle/

.debug_rules: &debug_rules
  - if: $CI_COMMIT_TAG
    when: never # Never build debug builds for tags
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "web"

.release_rules: &release_rules
  - if: $CI_COMMIT_TAG

variables:
  IMAGE_PREFIX: ""
  DEFAULT_IMAGE: "jangrewe/gitlab-ci-android"
  DEPLOY_DEBUG_APK_SLACK_MESSAGE: "Hello Team! Here is the latest debug APK from branch `${CI_COMMIT_REF_NAME}`. It was triggered by: `${CI_PIPELINE_SOURCE}`."
  DEPLOY_DEBUG_APK_PATH: app/build/outputs/apk/debug
  DEPLOY_DEBUG_APK_NAME: yourdebugapkname
  DEPLOY_RELEASE_APK_SLACK_MESSAGE: "Hello Team! Here is the latest release APK triggered by tag: `${CI_COMMIT_TAG}`"
  DEPLOY_RELEASE_APK_PATH: app/build/outputs/apk/release
  DEPLOY_RELEASE_APK_NAME: yourreleaseapkname
  APK_SLACK_CHANNEL_ACCESS_TOKEN: ""
  APK_SLACK_CHANNEL_ID: ""

default:
  image: ${IMAGE_PREFIX}$DEFAULT_IMAGE

before_script:
  - !reference [ .configure_gradle_wrapper, script ]

stages:
  - test
  - assembleApk
  - deployApk

.testBase:
  stage: test
  script:
    - ./gradlew -Pci --console=plain $BUILD_TARGET
  artifacts:
    when: always
    reports:
      junit:
        - "**/TEST-*.xml"

testDebug:
  rules: *debug_rules
  extends: .testBase
  variables:
    BUILD_TARGET: testDebug

testRelease:
  rules: *release_rules
  extends: .testBase
  variables:
    BUILD_TARGET: testRelease

instrumentationTests:
  stage: test
  tags:
    - "arch:arm"
  rules: *debug_rules
  image: redemonbr/android-sdk
  variables:
    ASDK_ACCEPT_LICENSES: 1
  script:
    - echo "Starting default emulator"
    - echo "Android home is $ANDROID_HOME"
    - $ANDROID_HOME/emulator/emulator @default -no-window -no-audio 2>&1 &
    - EMU_BOOTED="no"
    - while [[ ${EMU_BOOTED} != *"stopped"* ]]; do
        echo "Waiting for emulator booted..."
        sleep 5
        EMU_BOOTED=$(adb shell getprop init.svc.bootanim || echo "no")
      done
    - echo "Emulator booted"  
    # Turn off animation
    - adb shell settings put global window_animation_scale 0
    - adb shell settings put global transition_animation_scale 0
    - adb shell settings put global animator_duration_scale 0
    # Turn off google auto-fill
    - adb shell settings put secure autofill_service null
    - ./gradlew connectedAndroidTest
  artifacts:
    when: always
    expire_in: 1 week
    paths:
      - app/build/reports/androidTests

assembleApkDebug:
  stage: assembleApk
  rules: *debug_rules
  script:
    - ./gradlew assembleDebug
  artifacts:
    paths:
      - app/build/outputs/apk/debug

assembleApkRelease:
  stage: assembleApk
  rules: *release_rules
  script:
    - echo ${KEYSTORE_FILE} | base64 -d > my.keystore
    - ./gradlew assembleRelease
      -Pandroid.injected.signing.store.file=$(pwd)/my.keystore
      -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD
      -Pandroid.injected.signing.key.alias=$KEY_ALIAS
      -Pandroid.injected.signing.key.password=$KEY_PASSWORD
  artifacts:
    paths:
      - app/build/outputs/apk/release

deployApkDebug:
  stage: deployApk
  rules: *debug_rules
  allow_failure: true
  script:
    - if [ -z "${APK_SLACK_CHANNEL_ACCESS_TOKEN}" ]; then echo "APK_SLACK_CHANNEL_ACCESS_TOKEN is unset so not pushing message to Slack"; else echo "APK_SLACK_CHANNEL_ACCESS_TOKEN is set to '$APK_SLACK_CHANNEL_ACCESS_TOKEN'"; fi
    - if [ -z "${APK_SLACK_CHANNEL_ID}" ]; then echo "APK_SLACK_CHANNEL_ID is unset so not pushing message to Slack"; else echo "APK_SLACK_CHANNEL_ACCESS_TOKEN is set to '$APK_SLACK_CHANNEL_ID'"; fi
    - if [ -z "${DEPLOY_DEBUG_APK_SLACK_MESSAGE}" ]; then echo "$DEPLOY_DEBUG_APK_SLACK_MESSAGE is unset so will use empty message for Slack"; else echo "$DEPLOY_DEBUG_APK_SLACK_MESSAGE is set to '$DEPLOY_DEBUG_APK_SLACK_MESSAGE'"; fi
    - debug_apk_file=$(find $DEPLOY_DEBUG_APK_PATH -name *$DEPLOY_DEBUG_APK_NAME*)
    - echo "found debug apk file $debug_apk_file"
    - |
      curl \
        -F token="${APK_SLACK_CHANNEL_ACCESS_TOKEN}" \
        -F channels="${APK_SLACK_CHANNEL_ID}" \
        -F initial_comment="$DEPLOY_DEBUG_APK_SLACK_MESSAGE" \
        -F "file=@$debug_apk_file" \
        https://slack.com/api/files.upload
  cache: {}

deployApkRelease:
  stage: deployApk
  rules: *release_rules
  script:
    - if [ -z "${APK_SLACK_CHANNEL_ACCESS_TOKEN}" ]; then echo "APK_SLACK_CHANNEL_ACCESS_TOKEN is unset so not pushing message to Slack"; else echo "APK_SLACK_CHANNEL_ACCESS_TOKEN is set to '$APK_SLACK_CHANNEL_ACCESS_TOKEN'"; fi
    - if [ -z "${APK_SLACK_CHANNEL_ID}" ]; then echo "APK_SLACK_CHANNEL_ID is unset so not pushing message to Slack"; else echo "APK_SLACK_CHANNEL_ACCESS_TOKEN is set to '$APK_SLACK_CHANNEL_ID'"; fi
    - if [ -z "${DEPLOY_RELEASE_APK_SLACK_MESSAGE}" ]; then echo "$DEPLOY_RELEASE_APK_SLACK_MESSAGE is unset so will use empty message for Slack"; else echo "$DEPLOY_RELEASE_APK_SLACK_MESSAGE is set to '$DEPLOY_RELEASE_APK_SLACK_MESSAGE'"; fi
    - release_apk_file=$(find $DEPLOY_RELEASE_APK_PATH -name *$DEPLOY_RELEASE_APK_NAME*)
    - echo "found release apk file $release_apk_file"
    - |
      curl \
        -F token="${APK_SLACK_CHANNEL_ACCESS_TOKEN}" \
        -F channels="${APK_SLACK_CHANNEL_ID}" \
        -F initial_comment="$DEPLOY_RELEASE_APK_SLACK_MESSAGE" \
        -F "file=@$release_apk_file" \
        https://slack.com/api/files.upload
  cache: {}  

workflow:
  rules: # Trigger pipeline:
    - if: $CI_MERGE_REQUEST_IID # if this is part of an MR
    - if: $CI_COMMIT_TAG # if this is a release
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # if this is a push to develop
    - if: '$CI_COMMIT_BRANCH =~ $DEV_OR_RELEASE_REGEX' # if this is a push to a release branch
    - if: $CI_PIPELINE_SOURCE == "web" # if triggered from the Gitlab UI

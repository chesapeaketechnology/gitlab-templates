include:
  - remote: https://raw.githubusercontent.com/chesapeaketechnology/gitlab-templates/release/1.3/lib/gitlab/ci/templates/references/gradle/GradleWrapperSetup.yml

cache:
  key: ${CI_PROJECT_ID}
  paths:
    - .gradle/

.debug_rules: &debug_rules
  - if: $CI_COMMIT_TAG
    when: never # Never build debug builds for tags
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  - if: $CI_PIPELINE_SOURCE == "web"

.release_rules: &release_rules
  - if: $CI_COMMIT_TAG

variables:
  IMAGE_PREFIX: ""
  DEFAULT_IMAGE: "jangrewe/gitlab-ci-android"
  DEPLOY_DEBUG_APK_SLACK_MESSAGE: "Hello Team! Here is the latest debug APK from branch `${CI_COMMIT_REF_NAME}`. It was triggered by: `${CI_PIPELINE_SOURCE}`."
  DEPLOY_DEBUG_APK_PATH: app/build/outputs/apk/debug
  DEPLOY_DEBUG_APK_NAME: yourdebugapkname
  DEPLOY_RELEASE_APK_SLACK_MESSAGE: "Hello Team! Here is the latest release APK triggered by tag: `${CI_COMMIT_TAG}`"
  DEPLOY_RELEASE_APK_PATH: app/build/outputs/apk/release
  DEPLOY_RELEASE_APK_NAME: yourreleaseapkname
  APK_SLACK_CHANNEL_ACCESS_TOKEN: ""
  APK_SLACK_CHANNEL_ID: ""
  LINT_CHECK_DISABLED: "false"
  ANDROID_EMULATOR_IP: ""
  ANDROID_EMULATOR_ADB_PORT: 5555
  APP_PACKAGE_NAMES_TO_FORCE_UNINSTALL: ""

default:
  image: ${IMAGE_PREFIX}$DEFAULT_IMAGE
  interruptible: true

before_script:
  - !reference [ .configure_gradle_wrapper, script ]

stages:
  - test
  - assembleApk
  - deployApk

.testBase:
  stage: test
  script:
    - ./gradlew -Pci --console=plain $BUILD_TARGET
  artifacts:
    when: always
    reports:
      junit:
        - "**/TEST-*.xml"

lintDebug:
  rules:
    - if: '$LINT_CHECK_DISABLED =~ /true/i'
      when: never
    - if: $CI_COMMIT_TAG
      when: never # Never build debug builds for tags
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "web"
  extends: .testBase
  variables:
    BUILD_TARGET: lintDebug
  after_script:
    - echo "copying lint results to gitlab pages so html can be viewed easily in a Gitlab artifact"
    - public_dir_tmp=$CI_PROJECT_DIR/../public
    - public_dir_final=$CI_PROJECT_DIR/public
    - mkdir -p $public_dir_final
    - mv $public_dir_final $public_dir_tmp
    - destination=$(cd -- "$public_dir_tmp" && pwd) # make it an absolute path
    - echo $destination
    - |+
      cd -- "$CI_PROJECT_DIR" &&
      find . -name "lint-results-debug.xml" -exec sh -c '
      mkdir -p "$0/${1%/*}"
      cp "$1" "$0/$1"
      ' "$destination" {} \;
    - mv $public_dir_tmp $public_dir_final
    - ls -l $public_dir_tmp || true
    - ls -l $public_dir_final || true
  artifacts:
    paths:
      - "**/build/reports/lint-results-debug.html"
      - public
    when: always
  allow_failure: true

testDebug:
  rules: *debug_rules
  extends: .testBase
  variables:
    BUILD_TARGET: testDebug

testRelease:
  rules: *release_rules
  extends: .testBase
  variables:
    BUILD_TARGET: testRelease


instrumentationTests:
  rules: *debug_rules
  extends: .testBase
  variables:
    ANDROID_SDK_ROOT: "/sdk"
    ADB_EXECUTABLE: $ANDROID_SDK_ROOT/platform-tools/adb
  script:
    - sdkmanager --version

    - sdkmanager "platform-tools"

    # Not necessary, but just for surity
    - chmod +x ./gradlew

    - ls -l $ANDROID_HOME/platform-tools || true

    - $ADB_EXECUTABLE start-server
    - $ADB_EXECUTABLE devices
    - $ADB_EXECUTABLE connect "$ANDROID_EMULATOR_IP:$ANDROID_EMULATOR_ADB_PORT"
    - $ADB_EXECUTABLE devices

    - |+
      for app_package_name in $APP_PACKAGE_NAMES_TO_FORCE_UNINSTALL
      do
        adb uninstall "$app_package_name" || true; 
      done

    - ./gradlew -Pci --console=plain connectedDebugAndroidTest
  artifacts:
    when: always
    expire_in: 1 week
    reports:
      junit: [
        ./**/build/outputs/androidTest-results/connected/TEST-*.xml,
      ]
    paths:
      - "**/build/outputs/androidTest-results"
      - "**/build/reports/androidTests"

assembleApkDebug:
  stage: assembleApk
  rules: *debug_rules
  script:
    - ./gradlew assembleDebug
  artifacts:
    paths:
      - app/build/outputs/apk/debug

assembleApkRelease:
  stage: assembleApk
  rules: *release_rules
  script:
    - echo ${KEYSTORE_FILE} | base64 -d > my.keystore
    - ./gradlew assembleRelease
      -Pandroid.injected.signing.store.file=$(pwd)/my.keystore
      -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD
      -Pandroid.injected.signing.key.alias=$KEY_ALIAS
      -Pandroid.injected.signing.key.password=$KEY_PASSWORD
  artifacts:
    paths:
      - app/build/outputs/apk/release

deployApkDebug:
  stage: deployApk
  rules: *debug_rules
  allow_failure: true
  script:
    - if [ -z "${APK_SLACK_CHANNEL_ACCESS_TOKEN}" ]; then echo "APK_SLACK_CHANNEL_ACCESS_TOKEN is unset so not pushing message to Slack"; else echo "APK_SLACK_CHANNEL_ACCESS_TOKEN is set to '$APK_SLACK_CHANNEL_ACCESS_TOKEN'"; fi
    - if [ -z "${APK_SLACK_CHANNEL_ID}" ]; then echo "APK_SLACK_CHANNEL_ID is unset so not pushing message to Slack"; else echo "APK_SLACK_CHANNEL_ACCESS_TOKEN is set to '$APK_SLACK_CHANNEL_ID'"; fi
    - if [ -z "${DEPLOY_DEBUG_APK_SLACK_MESSAGE}" ]; then echo "$DEPLOY_DEBUG_APK_SLACK_MESSAGE is unset so will use empty message for Slack"; else echo "$DEPLOY_DEBUG_APK_SLACK_MESSAGE is set to '$DEPLOY_DEBUG_APK_SLACK_MESSAGE'"; fi
    - debug_apk_file=$(find $DEPLOY_DEBUG_APK_PATH -name *$DEPLOY_DEBUG_APK_NAME*)
    - echo "found debug apk file $debug_apk_file"
    - |
      curl \
        -F token="${APK_SLACK_CHANNEL_ACCESS_TOKEN}" \
        -F channels="${APK_SLACK_CHANNEL_ID}" \
        -F initial_comment="$DEPLOY_DEBUG_APK_SLACK_MESSAGE" \
        -F "file=@$debug_apk_file" \
        https://slack.com/api/files.upload
  cache: {}

deployApkRelease:
  stage: deployApk
  rules: *release_rules
  script:
    - if [ -z "${APK_SLACK_CHANNEL_ACCESS_TOKEN}" ]; then echo "APK_SLACK_CHANNEL_ACCESS_TOKEN is unset so not pushing message to Slack"; else echo "APK_SLACK_CHANNEL_ACCESS_TOKEN is set to '$APK_SLACK_CHANNEL_ACCESS_TOKEN'"; fi
    - if [ -z "${APK_SLACK_CHANNEL_ID}" ]; then echo "APK_SLACK_CHANNEL_ID is unset so not pushing message to Slack"; else echo "APK_SLACK_CHANNEL_ACCESS_TOKEN is set to '$APK_SLACK_CHANNEL_ID'"; fi
    - if [ -z "${DEPLOY_RELEASE_APK_SLACK_MESSAGE}" ]; then echo "$DEPLOY_RELEASE_APK_SLACK_MESSAGE is unset so will use empty message for Slack"; else echo "$DEPLOY_RELEASE_APK_SLACK_MESSAGE is set to '$DEPLOY_RELEASE_APK_SLACK_MESSAGE'"; fi
    - release_apk_file=$(find $DEPLOY_RELEASE_APK_PATH -name *$DEPLOY_RELEASE_APK_NAME*)
    - echo "found release apk file $release_apk_file"
    - |
      curl \
        -F token="${APK_SLACK_CHANNEL_ACCESS_TOKEN}" \
        -F channels="${APK_SLACK_CHANNEL_ID}" \
        -F initial_comment="$DEPLOY_RELEASE_APK_SLACK_MESSAGE" \
        -F "file=@$release_apk_file" \
        https://slack.com/api/files.upload
  cache: {}

workflow:
  rules: # Trigger pipeline:
    - if: $CI_MERGE_REQUEST_IID # if this is part of an MR
    - if: $CI_COMMIT_TAG # if this is a release
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # if this is a push to develop
    - if: '$CI_COMMIT_BRANCH =~ $DEV_OR_RELEASE_REGEX' # if this is a push to a release branch
    - if: $CI_PIPELINE_SOURCE == "web" # if triggered from the Gitlab UI

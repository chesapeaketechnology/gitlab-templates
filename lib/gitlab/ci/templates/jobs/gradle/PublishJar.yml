variables:
  GIT_TASKS_ENABLED: "true"
  DEV_OR_RELEASE_REGEX: '^develop$|^v3-develop$|^v2-develop$|^[0-9]+\.[0-9]+$|^release\/.+$'
  RELEASE:
    value: ""
    description: Determines what type of jar should be produced. Leave blank to produce a SNAPSHOT, use "FINAL" to create a final release, or use any other value to produce a release candidate.
  RELEASE_GRADLE_FLAGS:
    value: ""
  FINAL_RELEASE_PATCH_TASK:
    value: "rollPatchVersion"
    description: Specifies how the BSP will increment a project's version.txt have a final release is published. Versions can be rolled using either "rollPatchVersion" or "rollMinorVersion".

pages:
  stage: publish
  rules:
    - if: $PUBLISH_JAVADOCS_DISABLED
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH =~ $DEV_OR_RELEASE_REGEX
  script:
    - echo "CI Pipeline Source = '$CI_PIPELINE_SOURCE'"
    - ./gradlew javadoc -x build -x test
    - ./gradlew compileJava javadoc -x test
    - rm -rf public
    - mkdir public
    - mkdir public/javadocs
    - wget https://raw.githubusercontent.com/chesapeaketechnology/gitlab-templates/release/1.2/lib/gitlab/ci/templates/references/javadoc/create_aggregate_javadoc_page.py
    - python3 create_aggregate_javadoc_page.py
    - mkdir public/coverage
    - mkdir public/quality
    - mkdir public/dependency-licenses
    - test -e build/docs/javadoc && cp -R build/docs/javadoc/* public/javadocs
    - test -e build/reports/jacoco/test/html/ && cp -R build/reports/jacoco/test/html/* public/coverage
    - test -e build/reports/pmd && cp -R build/reports/pmd/* public/quality && mv public/quality/main.html public/quality/index.html
    - test -e build/reports/dependency-license && cp -R build/reports/dependency-license/* public/dependency-licenses
    - |
      cat > public/index.html <<EOF
      <html>
      <head>
        <title>Repo Resources</title>
      </head>
      <body>
      <h1><a href="./javadocs/index.html">Javadocs</a></h1>
      <h1><a href="./coverage/index.html">Jacoco Test Coverage</a></h1>
      <h1><a href="./quality/index.html">PMD Code Quality</a></h1>
      <h1><a href="./dependency-licenses/index.html">Dependency Licenses</a></h1>
      </body>
      </html>
      EOF

  artifacts:
    paths:
      - "build/docs/javadoc"
      - "*/build/docs/javadoc"
      - public


publish_snapshot_jar:
  stage: publish
  script:
    - echo "CI Pipeline Source = '$CI_PIPELINE_SOURCE'"
    - echo "Publishing with flags '$STANDARD_GRADLE_FLAGS $PUBLISH_SNAPSHOT_GRADLE_FLAGS'"
    - ./gradlew $STANDARD_GRADLE_FLAGS $PUBLISH_SNAPSHOT_GRADLE_FLAGS -PforcePublish -Pgitlab -Pjenkins publish
  rules:
    - if: $PUBLISH_SNAPSHOT_JAR_DISABLED
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $RELEASE
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH =~ $DEV_REGEX

publish_release_jar:
  stage: publish
  script:
    - apt-get update
    - apt-get -y install git
    - if [[ $CI_COMMIT_BRANCH =~ $DEV_OR_RELEASE_REGEX ]]; then IS_RELEASE_BRANCH="true"; else IS_RELEASE_BRANCH=""; fi
    - if [[ -z "$IS_RELEASE_BRANCH" ]]; then
      echo "You can not run release builds off of branch $CI_COMMIT_BRANCH";
      exit 1;
      fi
    - if [[ $(echo $RELEASE | tr '[:upper:]' '[:lower:]') == "final" ]] ; then
      echo "FINAL BUILD";
      RC_FLAG=-Pfinal;
      else
      echo "RC build $RELEASE";
      RC_FLAG=-Prc=${RELEASE};
      fi
    # checkout a named branch instead of a SHA (to keep the BSP happy)
    - echo "Check out $CI_COMMIT_BRANCH"
    - git checkout -q -b $CI_COMMIT_BRANCH origin/$CI_COMMIT_BRANCH
    - ./gradlew $STANDARD_GRADLE_FLAGS $RELEASE_GRADLE_FLAGS $PUBLISH_SNAPSHOT_GRADLE_FLAGS -Pforce -Prelease $RC_FLAG build
  rules:
    - if: $PUBLISH_RELEASE_JAR_DISABLED
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    # Invoked from the web UI and RELEASE has a non-empty value
    - if: $CI_PIPELINE_SOURCE == "web" && $RELEASE
    - if: $FORCE_PUBLISH_RELEASE_JAR == "true"

roll_project_version:
  stage: repo_management
  script:
    - apt-get update
    - apt-get -y install git
    # checkout a named branch instead of a SHA (to keep the BSP happy)
    - echo "Check out $CI_COMMIT_BRANCH"
    - git checkout -q -b $CI_COMMIT_BRANCH origin/$CI_COMMIT_BRANCH
    - ./gradlew $STANDARD_GRADLE_FLAGS $FINAL_RELEASE_PATCH_TASK
  rules:
    - if: $ROLL_PROJECT_VERSION_DISABLED
      when: never
    - if: $CI_PIPELINE_SOURCE == "web" && ($RELEASE == "final" || $RELEASE == "FINAL")
    - if: $FORCE_ROLL_PROJECT_VERSION == "true"


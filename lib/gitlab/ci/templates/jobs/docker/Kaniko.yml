variables:
  USE_DOCKER_AUTH_CONFIG: "true"
  DOCKER_DIRECTORY: $CI_PROJECT_DIR
  DOCKERFILE: Dockerfile
  MAIN_BRANCH: $CI_DEFAULT_BRANCH
  OVERWRITABLE_TAG_REGEX: \-rc\.[0-9]

kaniko_publish:
  stage: publish
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  script:
    - if [[ $DOCKER_DIRECTORY ]]; then cd $DOCKER_DIRECTORY; fi;
    - mkdir -p /kaniko/.docker
    - if [ -f "${REGISTRY_CRT}" ]; then cat "${REGISTRY_CRT}" >> /kaniko/ssl/certs/ca-certificates.crt; fi # supports self-signed registry
    - if [ $USE_DOCKER_AUTH_CONFIG = "true" ]; then echo "${DOCKER_AUTH_CONFIG}" > /kaniko/.docker/config.json; else echo "{\"auths\":{\"$DOCKER_REPO_HOSTNAME\":{\"username\":\"$DOCKER_REPO_USERNAME\",\"password\":\"$DOCKER_REPO_PASSWORD\"}}}" > /kaniko/.docker/config.json; fi

    - |
      if ! echo "$VERSION" | grep -q "$OVERWRITABLE_TAG_REGEX"; then
          echo "the Docker tag is not considered overwritable, checking if Docker image already exists in repository because we don't want to overwrite tags that aren't $OVERWRITABLE_TAG_REGEX"
          dockerfile_to_test_if_image_tag_exists=test-image-tag-exists.Dockerfile
          touch $dockerfile_to_test_if_image_tag_exists
          echo FROM $DOCKER_REPO_HOSTNAME/$DOCKER_REPO_NAME/$APP_NAME:$VERSION > $dockerfile_to_test_if_image_tag_exists
          echo "checking if image exists already, will exit and fail Gitlab job if the image already exists"
          /kaniko/executor --context $DOCKER_DIRECTORY --dockerfile $dockerfile_to_test_if_image_tag_exists --no-push > /dev/null && exit 1 || true
          echo "image doesn't exist, continuing on"
      fi

    - echo "Pushing docker image with version $VERSION"
    - /kaniko/executor --context $DOCKER_DIRECTORY --dockerfile $DOCKERFILE --destination $DOCKER_REPO_HOSTNAME/$DOCKER_REPO_NAME/$APP_NAME:$VERSION

    - |
      if [ "$CI_COMMIT_REF_NAME" == "$MAIN_BRANCH" ]; then
          echo "pushing a latest tagged docker image since on main branch"
          /kaniko/executor --context $DOCKER_DIRECTORY --dockerfile $DOCKERFILE --destination $DOCKER_REPO_HOSTNAME/$DOCKER_REPO_NAME/$APP_NAME:latest
      fi
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "web" && $PUBLISH_DOCKER
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH
